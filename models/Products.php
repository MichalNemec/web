<?php

namespace app\models;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\Html;
use yii\validators\UniqueValidator;

/**
 * This is the model class for table "products".
 *
 * @property string $id
 * @property string $sku
 * @property string $name
 * @property string $slug
 * @property string $description
 * @property string $product_status_id
 * @property string $regular_price
 * @property string $discount_price
 * @property int $quantity
 * @property int $taxable
 * @property string $created_at
 * @property string $updated_at
 * @property int $active
 * @property int $shipping_id
 *
 * @property ProductCategories[] $productCategories
 * @property Categories[] $categories
 * @property ProductTags[] $productTags
 * @property Tags[] $tags
 * @property ProductStatuses $productStatus
 */
class Products extends \yii\db\ActiveRecord
{
    public $tagsFilled;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'products';
    }

    public function generateRandomString($length = 12) {
        $sku = substr(str_shuffle(str_repeat($x='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', ceil($length/strlen($x)) )),1,$length);
        $row = $this->find()->where(['sku' => $sku])->limit(1)->all();
        if($row) {
            $this->generateRandomString();
        } else {
            return $sku;
        }
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => new Expression('NOW()'),
            ],
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'name',
                'slugAttribute' => 'slug',
            ],
            'image' => [
                'class' => 'rico\yii2images\behaviors\ImageBehave',
            ]
        ];
    }

    public function beforeSave($insert)
    {
        if($insert) {
            $this->sku = $this->generateRandomString();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'product_status_id'], 'required'],
            [['description'], 'string'],
            [['product_status_id', 'quantity', 'taxable', 'active', 'shipping_id'], 'integer'],
            [['regular_price', 'discount_price'], 'number'],
            [['created_at', 'updated_at', 'slug'], 'safe'],
            [['sku', 'name'], 'string', 'max' => 255],
            ['sku', 'unique'],
            [['product_status_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductStatuses::className(), 'targetAttribute' => ['product_status_id' => 'id']],
            //scenarios
            [['name', 'description'], 'required', 'on' => 'step1'],
            [['product_status_id'], 'required', 'on' => 'step12'],
        ];
    }

    public function scenarios() {
        $scenarios = parent::scenarios();
        $scenarios['step1'] = ['name','description'];
        $scenarios['step2'] = ['product_status_id'];
        return $scenarios;
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('model', 'ID'),
            'sku' => Yii::t('model', 'Sku'),
            'name' => Yii::t('model', 'Name'),
            'slug' => Yii::t('model', 'Slug'),
            'description' => Yii::t('model', 'Description'),
            'product_status_id' => Yii::t('model', 'Product Status ID'),
            'regular_price' => Yii::t('model', 'Regular Price'),
            'discount_price' => Yii::t('model', 'Discount Price'),
            'quantity' => Yii::t('model', 'Quantity'),
            'taxable' => Yii::t('model', 'Taxable'),
            'created_at' => Yii::t('model', 'Inserted At'),
            'updated_at' => Yii::t('model', 'Updated At'),
            'active' => Yii::t('model', 'Active'),
            'shipping_id' => Yii::t('model', 'Shippin ID'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductCategories()
    {
        return $this->hasMany(ProductCategories::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategories()
    {
        return $this->hasMany(Categories::className(), ['id' => 'category_id'])->viaTable('product_categories', ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductTags()
    {
        return $this->hasMany(ProductTags::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductVariants()
    {
        return $this->hasMany(ProductVariants::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tags::className(), ['id' => 'tag_id'])->viaTable('product_tags', ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductStatus()
    {
        return $this->hasOne(ProductStatuses::className(), ['id' => 'product_status_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getShipping()
    {
        return $this->hasOne(Shipping::className(), ['id' => 'shipping_id']);
    }

    public function manageImage($image)
    {
        if($image && !$image->error) {
            return $this->attachImage($image->tempName, 0, $image->name);
        }
        return true;
    }

    public function getPicture($img, $size = null, $clean = false) {
        $sizes = $img->getSizes();
        if($size) {
            //pokud potřebujeme clean verzi obrázku - cesta
            if($clean) {
                $path =  "/".$img->getPath($size);
                return str_replace('\\', '/', $path);

            }

            // pokud je obrázek menší než stanovená size
            if($sizes['width'] < 500) {
                $size = $sizes['width'];
            }

            return Html::img("/".$img->getPath($size), ['class' => 'img-responsive', 'style' => 'margin: 0 auto']);
        }
        else {
            // výchozí výstup
            return "/".$img->getPathToOrigin();
        }
    }
}
